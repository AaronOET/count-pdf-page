#!/usr/bin/env python3
"""
PDF Page Counter
Counts pages in all PDF files in the current directory and saves results to a markdown file.
"""

import os
import glob
import PyPDF2
from datetime import datetime

def count_pdf_pages(pdf_path):
    """
    Count the number of pages in a PDF file.
    
    Args:
        pdf_path (str): Path to the PDF file
        
    Returns:
        int: Number of pages, or -1 if error occurred
    """
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            return len(pdf_reader.pages)
    except Exception as e:
        print(f"Error reading {pdf_path}: {e}")
        return -1


def main():
    """
    Main function to process all PDF files and generate markdown report.
    """
    # Get current directory
    current_dir = os.getcwd()
    print(f"Scanning for PDF files in: {current_dir}")
    
    # Find all PDF files in current directory
    pdf_files = glob.glob("*.pdf")
    
    if not pdf_files:
        print("No PDF files found in the current directory.")
        return
    
    print(f"Found {len(pdf_files)} PDF files")
    
    # Count pages for each PDF
    results = []
    total_pages = 0
    
    for pdf_file in sorted(pdf_files):
        print(f"Processing: {pdf_file}")
        page_count = count_pdf_pages(pdf_file)
        
        if page_count > 0:
            results.append((pdf_file, page_count))
            total_pages += page_count
        else:
            results.append((pdf_file, "Error"))
    
    # Generate markdown report
    markdown_content = generate_markdown_report(results, total_pages)
    
    # Save to markdown file
    output_file = "pdf_page_count_report.md"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    print(f"\nReport saved to: {output_file}")
    print(f"Total pages processed: {total_pages}")


def generate_markdown_report(results, total_pages):
    """
    Generate markdown content for the report.
    
    Args:
        results (list): List of tuples (filename, page_count)
        total_pages (int): Total number of pages
        
    Returns:
        str: Markdown formatted report
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    markdown = f"""# PDF Page Count Report

**Generated on:** {timestamp}

## Summary

- **Total PDF files:** {len(results)}
- **Total pages:** {total_pages}

## Detailed Results

| File Name | Page Count |
|-----------|------------|
"""
    
    for filename, page_count in results:
        markdown += f"| `{filename}` | {page_count} |\n"
    
    markdown += f"""
## Statistics

- **Average pages per file:** {total_pages / len([r for r in results if isinstance(r[1], int)]) if results else 0:.1f}
- **Largest file:** {max(results, key=lambda x: x[1] if isinstance(x[1], int) else 0)[0] if results else 'N/A'} ({max([r[1] for r in results if isinstance(r[1], int)], default=0)} pages)
- **Smallest file:** {min(results, key=lambda x: x[1] if isinstance(x[1], int) else float('inf'))[0] if results else 'N/A'} ({min([r[1] for r in results if isinstance(r[1], int)], default=0)} pages)

---
*Report generated by PDF Page Counter script*
"""
    
    return markdown


if __name__ == "__main__":
    main()
